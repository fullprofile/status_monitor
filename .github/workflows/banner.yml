name: Onfarm and Insight Banner

on:
  issues:
    types: [opened, closed]
  workflow_dispatch:

jobs:
  create_issue:
    name: Create issue on Onfarm and/or Insight repo
    runs-on: ubuntu-18.04
    if: ${{ github.event.action == 'opened' && contains(github.event.issue.labels.*.name, 'BANNER') }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            if (context.issue.labels.some(l => l.name.includes('ONFARM'))) {
              await github.rest.issues.create({
                owner: 'fullprofile',
                repo: 'web-app-shell',
                // Issue's id will be used to search when closing the issue
                title: `${context.issue.title} - ${ context.issue.id }`,
                body: context.issue.body,
                labels: context.issue.labels.map(l => l.name),
              });
            };

            if (context.issue.labels.some(l => l.name.includes('INSIGHT'))) {
              await github.rest.issues.create({
                owner: 'fullprofile',
                repo: 'wp-report-app',
                // Issue's id will be used to search when closing the issue
                title: `${context.issue.title} - ${ context.issue.id }`,
                body: context.issue.body,
                labels: context.issue.labels.map(l => l.name),
              });
            };
  close_issue:
    name: Close issue on Onfarm and/or Insight repo
    runs-on: ubuntu-18.04
    if: ${{ github.event.action == 'closed' && contains(github.event.issue.labels.*.name, 'BANNER') }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            if (context.issue.labels.some((l) => l.name.includes("ONFARM"))) {
              // Fetch all issues on Onfarm repo with filter
              const issues = await github.rest.issues.listForRepo({
                owner: "fullprofile",
                repo: "web-app-shell",
                labels: ["BANNER"], // Filter issues with banner label
                state: "open", // Filter open issues
              });

              // Extract the related issue created by issue from status_monitor
              const linkedIssue = issues.data.find((i) =>
                i.title.includes(context.issue.id)
              );

              // Update Onfarm issue to close
              await github.rest.issues.update({
                owner: "fullprofile",
                repo: "web-app-shell",
                issue_number: linkedIssue.number,
                state: "closed",
              });
            }

            if (context.issue.labels.some((l) => l.name.includes("INSIGHT"))) {
              // Fetch all issues on Insight repo with filter
              const issues = await github.rest.issues.listForRepo({
                owner: "fullprofile",
                repo: "wp-report-app",
                labels: ["BANNER"], // Filter issues with banner label
                state: "open", // Filter open issues
              });

              // Extract the related issue created by issue from status_monitor
              const linkedIssue = issues.data.find((i) =>
                i.title.includes(context.issue.id)
              );

              // Update Insight issue to close
              await github.rest.issues.update({
                owner: "fullprofile",
                repo: "wp-report-app",
                issue_number: linkedIssue.number,
                state: "closed",
              });
            }

# Upload command that works on OSX
# aws s3 cp issue-info.md s3://maintenance-content/onfarm-banner.md --metadata startdate="$(date '+%a %b %d %Y %T GMT%z')",enddate="$(date -v +1m '+%a %b %d %Y %T GMT%z')"

name: Onfarm and Insight Banner

on:
  issues:
    types: [opened, closed]

jobs:
  open_issue:
    name: Build
    runs-on: ubuntu-18.04
    if: ${{ github.event.action == 'opened' && contains(github.event.issue.labels.*.name, 'BANNER') }}

    steps:
      - uses: actions/checkout@v2

      - name: Set DEV Specific AWS Keys for Onfarm
        if: contains(github.event.issue.labels.*.name, 'DEV') && contains(github.event.issue.labels.*.name, 'ONFARM')
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.DEV_AWS_ACCESS_KEY_ID }}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          echo "ROLE_TO_ASSUME=${{ secrets.DEV_AWS_ROLE_TO_ASSUME }}" >> "$GITHUB_ENV"
          echo "BUCKET_URL=s3://dev-maintenance-content/onfarm-banner.md" >> "$GITHUB_ENV"

      - name: Set SANDBOX Specific AWS Keys for Onfarm
        if: contains(github.event.issue.labels.*.name, 'SANDBOX') && contains(github.event.issue.labels.*.name, 'ONFARM')
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          echo "ROLE_TO_ASSUME=${{ secrets.STAGING_AWS_ROLE_TO_ASSUME }}" >> "$GITHUB_ENV"
          echo "BUCKET_URL=s3://sandbox-maintenance-content/onfarm-banner.md" >> "$GITHUB_ENV"

      - name: Set PRODUCTION Specific AWS Keys for Onfarm
        if: contains(github.event.issue.labels.*.name, 'PRODUCTION') && contains(github.event.issue.labels.*.name, 'ONFARM')
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          echo "ROLE_TO_ASSUME=${{ secrets.PROD_AWS_ROLE_TO_ASSUME }}" >> "$GITHUB_ENV"
          echo "BUCKET_URL=s3://prod-maintenance-content/onfarm-banner.md" >> "$GITHUB_ENV"

      - name: Set PRODUCTION Specific AWS Keys for Insight
        if: contains(github.event.issue.labels.*.name, 'PRODUCTION') && contains(github.event.issue.labels.*.name, 'INSIGHT')
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          echo "ROLE_TO_ASSUME=${{ secrets.PROD_AWS_ROLE_TO_ASSUME }}" >> "$GITHUB_ENV"
          echo "BUCKET_URL=s3://prod-maintenance-content/insight-banner.md" >> "$GITHUB_ENV"

      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "${{ env.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ env.AWS_SECRET_ACCESS_KEY }}"
          aws-region: us-west-2
          role-to-assume: "${{ env.ROLE_TO_ASSUME }}"
          role-external-id: "${{ secrets.AWS_ROLE_EXTERNAL_ID }}"
          role-duration-seconds: 1200

      - name: Upload to S3
        run: |
          echo '${{ github.event.issue.body }}' >> issue-info.md
          aws s3 cp issue-info.md ${{ env.BUCKET_URL }} --metadata startdate="$(date '+%a %b %d %Y %T GMT%z')",enddate="$(date -d '+1 month' '+%a %b %d %Y %T GMT%z')"

  close_issue:
    name: Build
    runs-on: ubuntu-18.04
    if: ${{ github.event.action == 'closed' && contains(github.event.issue.labels.*.name, 'BANNER') }}

    steps:
      - uses: actions/checkout@v2

      - name: Set DEV Specific AWS Keys for Onfarm
        if: contains(github.event.issue.labels.*.name, 'DEV') && contains(github.event.issue.labels.*.name, 'ONFARM')
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.DEV_AWS_ACCESS_KEY_ID }}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          echo "ROLE_TO_ASSUME=${{ secrets.DEV_AWS_ROLE_TO_ASSUME }}" >> "$GITHUB_ENV"
          echo "BUCKET_URL=s3://dev-maintenance-content/onfarm-banner.md" >> "$GITHUB_ENV"

      - name: Set SANDBOX Specific AWS Keys for Onfarm
        if: contains(github.event.issue.labels.*.name, 'SANDBOX') && contains(github.event.issue.labels.*.name, 'ONFARM')
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          echo "ROLE_TO_ASSUME=${{ secrets.STAGING_AWS_ROLE_TO_ASSUME }}" >> "$GITHUB_ENV"
          echo "BUCKET_URL=s3://sandbox-maintenance-content/onfarm-banner.md" >> "$GITHUB_ENV"

      - name: Set PRODUCTION Specific AWS Keys for Onfarm
        if: contains(github.event.issue.labels.*.name, 'PRODUCTION') && contains(github.event.issue.labels.*.name, 'ONFARM')
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          echo "ROLE_TO_ASSUME=${{ secrets.PROD_AWS_ROLE_TO_ASSUME }}" >> "$GITHUB_ENV"
          echo "BUCKET_URL=s3://prod-maintenance-content/onfarm-banner.md" >> "$GITHUB_ENV"

      - name: Set PRODUCTION Specific AWS Keys for Insight
        if: contains(github.event.issue.labels.*.name, 'PRODUCTION') && contains(github.event.issue.labels.*.name, 'INSIGHT')
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> "$GITHUB_ENV"
          echo "ROLE_TO_ASSUME=${{ secrets.PROD_AWS_ROLE_TO_ASSUME }}" >> "$GITHUB_ENV"
          echo "BUCKET_URL=s3://prod-maintenance-content/insight-banner.md" >> "$GITHUB_ENV"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "${{ env.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ env.AWS_SECRET_ACCESS_KEY }}"
          aws-region: us-west-2
          role-to-assume: "${{ env.ROLE_TO_ASSUME }}"
          role-external-id: "${{ secrets.AWS_ROLE_EXTERNAL_ID }}"
          role-duration-seconds: 1200

      - name: Upload to S3
        run: |
          echo '${{ github.event.issue.body }}' >> issue-info.md
          aws s3 cp issue-info.md ${{ env.BUCKET_URL }} --metadata startdate="$(date '+%a %b %d %Y %T GMT%z')",enddate="$(date '+%a %b %d %Y %T GMT%z')"
